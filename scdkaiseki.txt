【 SCDKAISEKI.DOC 】

　　この資料は、ＸＣver2になって新たに拡張されたＳＣＤ用シンボル情報の解析
　　結果です。拡張部のみを解説していますので、それ以外のオブジェクトファイ
　　ルのフォーマットなどに関する情報はそると氏によるKAISEKI.DOC/KAISEKI.TXT
　　を見てください。

　　この資料は中村祐一個人で調べたものなので、決してシャープ、ハドソン、そ
　　の他関係がありそうな会社、各種団体などには問い合わせないで下さい。

　　この資料はＰＤＤとします（扱いはKAISEKI.DOC/KAISEKI.TXTに準じます）。


§ ＳＣＤ用疑似命令について

　　アセンブラで拡張されたＳＣＤ用の疑似命令には以下のものがあります。アセ
　　ンブラ側ではあまりエラーチェックをしていないようなので、コンパイラがデ
　　バッグ用として出力する以外の形で直接これらの命令を使用することは避ける
　　べきでしょう（そうする必要もないと思いますが）。

○ .file	ソースファイル名の出力指定

	書式	.file	"＜ファイル名＞"

	解説	ソースファイル名をオブジェクトに出力します。他のＳＣＤ用疑
		似命令より必ず先に指定してください。

○ .ln		行番号とロケーションの対応の出力指定

	書式	.ln	＜行番号＞［,＜ロケーション値＞］

	解説	行番号とロケーションの対応をオブジェクトに出力します。
		＜行番号＞には、Ｃ言語で記述されたソースプログラムにおける
		行番号を指定しますが、ここで指定するのは各関数の開始行から
		の相対的な行番号であることに注意が必要です。

	例	void main(int argc, char *argv[])
		{					←.ln 1
			printf("%s\n", argv[0]);	←.ln 2
		}					←.ln 3
		int negate(int a)
		{					←.ln 1
			return -a;			←.ln 2
		}					←.ln 3

○ .def,.endef	シンボルテーブルエントリの作成

	書式	.def	＜シンボル名＞
			(属性を指定する疑似命令)
		.endef

	解説	Ｃ言語における変数や関数の属性などを格納するシンボルテーブ
		ルエントリを作成します。変数名、関数名は'_'(アンダーバー)
		で開始します。また、'.'で始まる特殊な予約シンボルがありま
		す。
		ここで指定するシンボル名は、アセンブラソース中のシンボル（ラ
		ベル名など）とは関係がありません。

○ .val		シンボルの値の指定

	書式	.val	＜式＞

	解説	式の値をシンボルのものとします。
		＜式＞は、シンボルが関数の場合はそのロケーションを、シンボ
		ルがauto変数の場合はスタック上のオフセット値、構造体のメン
		バ名の場合は構造体先頭からのオフセット値を指定します。また、
		.val . と指定することによって現在のロケーションカウンタ値
		を与えることができます。

○ .scl		記憶クラスの宣言

	書式	.scl	＜式＞

	解説	記憶域クラスを宣言します。値とクラスの対応は次の通りです。

		1	auto変数
		2	extern変数/関数
		3	static変数/関数
		4	register変数
		8	構造体のメンバ名
		9	関数の引数
		10	構造体のタグ名
		11	共用体のメンバ名
		12	共用体のタグ名
		13	typedefされた型の名前(ＸＣでは未使用)
		15	列挙タグ名
		16	列挙メンバ名
		18	構造体/共用体のビットフィールド
		100	関数内のブロックの開始/終了
		101	関数の開始/終了
		102	構造体/共用体宣言の終了
		-1	関数定義の終了

○ .type	Ｃ言語における型の宣言

	書式	.type	＜式＞

	解説	Ｃ言語における型を宣言します。

		＜式＞は16bit無符号数値で指定し、最下位の４bitで基本的な型
		を宣言します。
		%0000	void
		%0010	char		%1100	unsigned char
		%0011	short int	%1101	unsigned short int
		%0100	long int	%1110	unsigned long int
		%0110	float
		%0111	double
		%1000	struct
		%1001	union
		%1010	列挙タグ名
		%1011	列挙メンバ名

		そして、その上に２bitずつ付加していきます。
		%01	～へのポインタ
		%10	～を返す関数
		%11	～の配列

		たとえば、char (*x[])() （charを返す関数へのポインタの配列）
		は、
			%10_01_11_0010 = $0272 = 626
		になります。

○ .tag		タグ名の宣言

	書式	.tag	＜タグ名＞

	解説	構造体/共用体/列挙におけるタグ名を宣言します。タグ名を省略
		して構造体などを宣言する場合は、ＸＣでは_.fake0,_.fake1な
		どの名前が仮に使われるようです。

○ .line	行番号の指定

	書式	.line	＜式＞

	解説	関数やブロックの開始、終了を指定するシンボルに対して、行番
		号や行数を与えます。

○ .size	サイズの指定

	書式	.size	＜式＞

	解説	シンボルにサイズを与えます。配列や構造体、共用体に対しては
		使用するバイト数、ビットフィールドに対しては使用するビット
		数を指定します。

○ .dim		配列の指定

	書式	.dim	＜式１＞［,＜式２＞…］

	解説	配列のシンボルに対して要素数と次元を与えます。式は４つまで
		指定可能です。ところが、ＸＣでは配列の宣言をしてもこの疑似
		命令が出力されないようです（バグ？）。

※特殊シンボル

　　.def,.endef疑似命令で指定するシンボルには、'.'で始まる以下のような特殊
　　シンボルがあります。

　　.bf		関数の始まりを宣言します。.line では関数を始める'{'がある
		行番号を指定します。

　　.ef		関数の終わりを宣言します。.line では関数の'{'から'}'までの
		行数を指定します。

　　.bb		ブロックの始まりを宣言します。.line では関数開始行から見た
		'{'の相対的な行番号を指定します。

　　.eb		ブロックの終わりを宣言します。.line では関数開始行から見た
		'}'の相対的な行番号を指定します。

　　.eos	構造体/共用体/列挙宣言の終了を宣言します。

　　また、ＳＣＤ疑似命令が使用されると、自動的に.file,.text,.data,.bssの各
　　シンボルが定義されます。


§ ＳＣＤ用拡張シンボル情報

　　オブジェクトファイル/実行ファイル中では、ＳＣＤ用拡張シンボル情報は以
　　下の３つの部分に分けられています。

　　１．行番号テーブル
	.ln 疑似命令で指定されたロケーションと行番号の対応がまとめられてい
	ます。

　　２．シンボルテーブル
	.def,.endef疑似命令によってシンボルに与えられたデータです。

　　３．シンボル名延長テーブル
	２．のシンボルテーブルデータに格納できるシンボル名は最大８文字まで
	なので、それ以上の長さを持つシンボル名を格納します。


§ 行番号テーブルのフォーマット

	*location.l : line.w
		:

　　上のように、６バイトで１組となって行番号とロケーションの対応が並んでい
　　ます。関数定義を始めるたびに行番号０が置かれ、その時のlocationは、対応
　　する関数のシンボルテーブル上の位置を示します。


§ シンボルテーブルのフォーマット

　　シンボルテーブルは18バイトで１組です。最初のテーブルから０，１，…と18
　　バイトごとに番号が付けられていると考えてください（シンボルテーブルの『位
　　置』と言う場合はこの番号を指します）。

　　以下、'*'の付いたデータは、リンクによって値が変更される可能性のあるデ
　　ータです。

○ 変数名/メンバ名の場合

	名前が８文字以下の場合（'_'も含めて）の場合は、

　　name : *val.l : *sect.w : type.w : scl.b : 00

	８文字以上の場合は、nameの部分が以下のようになります。

　　00 00 00 00 : *nptr.l : ～		（タグ名・関数名も同様）

	name は変数の名前が入る８バイトの領域です（余りは00で埋める）。

	nptr は、実際のシンボル名が格納されるシンボル名延長テーブルの先頭
	からのオフセット値です。

	val,type,scl は、各疑似命令で指定された値そのものです。

	sect は、.val疑似命令で指定された値の存在するセクションです。
		0001	.text
		0002	.data
		0003	.bss
		00fe	.comm
		ffff	(自動変数/メンバ名など、ソース上に実体がないもの)
		fffe	(列挙のメンバ名)

　　構造体や配列など、上の情報だけでは不足する場合には、以下のようなフォー
　　マットになります（テーブル２つ分を使用します）。

　　name : *val.l : *sect.w : type.w : scl.b : 01
	: *tag.l : size.l : dim1.w : dim2.w : dim3.w : dim4.w : 00 00

	tag は、.tag疑似命令で指定されたタグ名を宣言しているシンボルテーブ
	ルの位置です。

	size は、.size疑似命令で指定された値そのものです。

	dim1～dim4 は、.dim疑似命令で指定された値です。

　　（時々 size の上位ワードに『直前に使用された.lnの行番号』が格納される
　　ことがあるのですが、おそらくAS.Xのバグ（ワークエリアのクリアを忘れた？）
　　だと思われます。）

○ タグ名の場合

　　テーブル２つ分を使用します。

　　name : 00 00 00 00 : ff fe : type.w : scl.b : 01
	: 00 00 00 00 : size.l : 00 00 00 00 : *next.l : 00 00

	next は、次のタグ名/関数名の位置を指します。

○ 関数名の場合

　　テーブル２つ分を使用します。

　　name : *val.l : 00 01 : type.w : scl.b : 01
	: 00 00 00 00 : size.l : *lpos.l : *next.l : 00 00

	size は、その関数のサイズです。

	lpos は、対応する行番号０データのある行番号テーブル先頭からのオフ
	セット値です。

	next は、次の関数名/static変数名の位置を指します。

○ 特殊シンボルの場合

　　それぞれテーブル２つ分を使用します。

.bf
　' .  b  f  '
　　2e 62 66 00 00 00 00 00 : *val.l : 00 01 : 00 00 : 65 : 01
	: 00 00 00 00 : line.w : 00 00 : 00 00 00 00 : *efpos.l : 00 00

	line は、.line疑似命令で指定された値そのものです。

	efpos は、対応する.efの位置を指します。

.ef
　' .  e  f  '
　　2e 65 66 00 00 00 00 00 : *val.l : 00 01 : 00 00 : 65 : 01
	: 00 00 00 00 : line.w : 00 00 : 00 00 00 00 : 00 00 00 00 : 00 00

.bb
　' .  b  b  '
　　2e 62 62 00 00 00 00 00 : *val.l : 00 01 : 00 00 : 64 : 01
	: 00 00 00 00 : line.w : 00 00 : 00 00 00 00 : *ebpos.l : 00 00
                                . . 
	ebpos は、対応する.ebの次のテーブルの位置を指します（理由は不明）。

.eb
　' .  e  b  '
　　2e 65 62 00 00 00 00 00 : *val.l : 00 01 : 00 00 : 64 : 01
	: 00 00 00 00 : line.w : 00 00 : 00 00 00 00 : 00 00 00 00 : 00 00

.eos
　' .  e  o  s  '
　　2e 65 6f 73 00 00 00 00 : val.l : ff ff : 00 00 : 66 : 01
	: *tag.l : size.l : 00 00 00 00 : 00 00 00 00 : 00 00

.file
　' .  f  i  l  e  '
　　2e 66 69 6c 65 00 00 00 : *gpos.l : ff fe : 00 00 : 67 : 01
	: filename : 00 00 : 00 00

	gpos は、extern変数名の開始位置を指します。

	filename は、.file疑似命令によって指定されたソースファイル名の先頭
	14文字が入ります（余りは00で埋める）。

.text
　' .  t  e  x  t  '
　　2e 74 65 78 74 00 00 00 : 00 00 00 00 : 00 01 : 00 00 : 78 : 01
	: textsize.l : lnum.l : 00 00 00 00 : 00 00 00 00 : 00 00

	textsize は、プログラム中の.textセクションのサイズです。

	lnum は、行番号テーブルのデータ数です。

.data
　' .  d  a  t  a  '
　　2e 64 61 74 61 00 00 00 : textsize.l : 00 02 : 00 00 : 78 : 01
	: datasize.l : 00 00 00 00 : 00 00 00 00 : 00 00 00 00 : 00 00

	datasize は、プログラム中の.dataセクションのサイズです。

.bss
　' .  b  s  s  '
　　2e 62 73 73 00 00 00 00 : text+datasize.l : 00 03 : 00 00 : 78 : 01
	: bsssize.l : 00 00 00 00 : 00 00 00 00 : 00 00 00 00 : 00 00

	bsssize は、プログラム中の.bssセクションのサイズです。


§ シンボル名延長テーブルのフォーマット

	name : 00 : (even)
	   :

　　８文字以上のシンボル名は、終端に00を付けられてこのテーブルにまとめられ
　　ます。シンボルテーブルからは、このテーブル先頭からのオフセット値で参照
　　されます。


§ オブジェクトファイルのフォーマット

　　オブジェクトファイルでは、ＳＣＤ情報はエンドコード00 00の後に以下のよ
　　うに並んでいます。

	[通常のオブジェクトファイル]
	   :
	00 00  (オブジェクトファイルのエンドコード)
	行番号テーブル長.l
	シンボルテーブル長.l
	シンボル名延長テーブル長.l
	行番号テーブル
	   :
	シンボルテーブル
	   :
	シンボル名延長テーブル
	   :

　　この中で、シンボルテーブルはアセンブラソース中の指定順に関係なく以下の
　　順番で並んでいます。

	.file			:最初にソースファイル名の指定

	タグ名			:構造体/共用体/列挙タグの宣言がすべて並ぶ
		メンバ名
		   :
	.eos
		:

	関数名			:関数定義がすべて並ぶ
	.bf
		引数名
		   :
		局所変数名
		   :
		.bb		:(関数のブロック構造に応じて)
		   :
		.eb
	.ef
	関数名			:.scl -1によって関数定義の終了を宣言
		:

	static変数名
	   :

	.text
	.data
	.bss

	extern変数名		:リンカを通すと１つにまとめられる
	   :


§ 実行ファイルのフォーマット

　　headerの追加情報
	+20 行番号テーブル長.l
	+24 シンボルテーブル長.l
	+28 シンボル名延長テーブル長.l

	[通常の実行ファイル]
	   :
	行番号テーブル
	   :
	シンボルテーブル
	   :
	シンボル名延長テーブル
	   :

　　ＳＣＤ情報自体はリンカを通ってもほとんど変わりません。各テーブルの内容
　　はリンクした順番で積み重ねられますが、シンボルテーブル中のextern変数名
　　の情報だけは各オブジェクト間で重複するものをまとめてからシンボルテーブ
　　ルの末尾に付きます。


（ＥＯＦ）
